// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class MaBridge {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MaBridge(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MaBridge.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int dart_bridge_init(
    ffi.Pointer<ffi.Void> pData,
  ) {
    return _dart_bridge_init(
      pData,
    );
  }

  late final _dart_bridge_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'dart_bridge_init');
  late final _dart_bridge_init =
      _dart_bridge_initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int bcmp(
    ffi.Pointer<ffi.Void> s1,
    ffi.Pointer<ffi.Void> s2,
    int n,
  ) {
    return _bcmp(
      s1,
      s2,
      n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> s1,
    ffi.Pointer<ffi.Void> s2,
    int n,
  ) {
    return _memcmp(
      s1,
      s2,
      n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> b1,
    ffi.Pointer<ffi.Void> b2,
    int n,
  ) {
    return _timingsafe_bcmp(
      b1,
      b2,
      n,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> s,
    int n,
  ) {
    return _bzero(
      s,
      n,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> s,
    int c,
    int n,
  ) {
    return _memset(
      s,
      c,
      n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memset_s(
    ffi.Pointer<ffi.Void> s,
    int smax,
    int c,
    int n,
  ) {
    return _memset_s(
      s,
      smax,
      c,
      n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int, ffi.Size)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int n,
  ) {
    return _memcpy(
      dst,
      src,
      n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int n,
  ) {
    return _memmove(
      dst,
      src,
      n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> src,
    ffi.Pointer<ffi.Void> dst,
    int n,
  ) {
    return _bcopy(
      src,
      dst,
      n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strlen(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _strlen(
      s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen(
    ffi.Pointer<ffi.Char> s,
    int n,
  ) {
    return _strnlen(
      s,
      n,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
  ) {
    return _strcmp(
      s1,
      s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
    int n,
  ) {
    return _strncmp(
      s1,
      s2,
      n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strprefix(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
  ) {
    return _strprefix(
      s1,
      s2,
    );
  }

  late final _strprefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strprefix');
  late final _strprefix = _strprefixPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
  ) {
    return _strcasecmp(
      s1,
      s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
    int n,
  ) {
    return _strncasecmp(
      s1,
      s2,
      n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> s,
    int c,
  ) {
    return _strchr(
      s,
      c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strnstr(
    ffi.Pointer<ffi.Char> s,
    ffi.Pointer<ffi.Char> find,
    int slen,
  ) {
    return _strnstr(
      s,
      find,
      slen,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int n,
  ) {
    return _strlcpy(
      dst,
      src,
      n,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int n,
  ) {
    return _strlcat(
      dst,
      src,
      n,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int n,
  ) {
    return _strncat(
      dst,
      src,
      n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int n,
  ) {
    return _strncpy(
      dst,
      src,
      n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _strcpy(
      arg0,
      arg1,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
  ) {
    return _strcat(
      dst,
      src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> STRDUP(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _STRDUP(
      arg0,
      arg1,
    );
  }

  late final _STRDUPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('STRDUP');
  late final _STRDUP = _STRDUPPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  void mab_device_info_init(
    ffi.Pointer<mab_device_info> pInfo,
    mab_device_id id,
    ffi.Pointer<ffi.Char> name,
    int isDefault,
  ) {
    return _mab_device_info_init(
      pInfo,
      id,
      name,
      isDefault,
    );
  }

  late final _mab_device_info_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<mab_device_info>, mab_device_id,
              ffi.Pointer<ffi.Char>, mab_bool)>>('mab_device_info_init');
  late final _mab_device_info_init = _mab_device_info_initPtr.asFunction<
      void Function(ffi.Pointer<mab_device_info>, mab_device_id,
          ffi.Pointer<ffi.Char>, int)>();

  int mab_device_context_init(
    ffi.Pointer<mab_device_context> pContext,
    ffi.Pointer<ffi.Int32> pBackends,
    int backendCount,
  ) {
    return _mab_device_context_init(
      pContext,
      pBackends,
      backendCount,
    );
  }

  late final _mab_device_context_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_device_context>,
              ffi.Pointer<ffi.Int32>, ffi.Int)>>('mab_device_context_init');
  late final _mab_device_context_init = _mab_device_context_initPtr.asFunction<
      int Function(
          ffi.Pointer<mab_device_context>, ffi.Pointer<ffi.Int32>, int)>();

  int mab_device_context_get_device_count(
    ffi.Pointer<mab_device_context> pContext,
    int type,
    ffi.Pointer<ffi.Int> pCount,
  ) {
    return _mab_device_context_get_device_count(
      pContext,
      type,
      pCount,
    );
  }

  late final _mab_device_context_get_device_countPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_device_context>, ffi.Int32,
              ffi.Pointer<ffi.Int>)>>('mab_device_context_get_device_count');
  late final _mab_device_context_get_device_count =
      _mab_device_context_get_device_countPtr.asFunction<
          int Function(
              ffi.Pointer<mab_device_context>, int, ffi.Pointer<ffi.Int>)>();

  int mab_device_context_get_device_info(
    ffi.Pointer<mab_device_context> pContext,
    int type,
    int index,
    ffi.Pointer<mab_device_info> pInfo,
  ) {
    return _mab_device_context_get_device_info(
      pContext,
      type,
      index,
      pInfo,
    );
  }

  late final _mab_device_context_get_device_infoPtr = _lookup<
          ffi.NativeFunction<
              mab_result Function(ffi.Pointer<mab_device_context>, ffi.Int32,
                  ffi.Int, ffi.Pointer<mab_device_info>)>>(
      'mab_device_context_get_device_info');
  late final _mab_device_context_get_device_info =
      _mab_device_context_get_device_infoPtr.asFunction<
          int Function(ffi.Pointer<mab_device_context>, int, int,
              ffi.Pointer<mab_device_info>)>();

  int mab_device_context_uninit(
    ffi.Pointer<mab_device_context> pContext,
  ) {
    return _mab_device_context_uninit(
      pContext,
    );
  }

  late final _mab_device_context_uninitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_device_context>)>>('mab_device_context_uninit');
  late final _mab_device_context_uninit = _mab_device_context_uninitPtr
      .asFunction<int Function(ffi.Pointer<mab_device_context>)>();

  mab_device_config mab_device_config_init(
    int type,
    int format,
    int sampleRate,
    int channels,
    int bufferFrameSize,
    int notificationPortId,
  ) {
    return _mab_device_config_init(
      type,
      format,
      sampleRate,
      channels,
      bufferFrameSize,
      notificationPortId,
    );
  }

  late final _mab_device_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_device_config Function(ffi.Int32, ffi.Int32, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int64)>>('mab_device_config_init');
  late final _mab_device_config_init = _mab_device_config_initPtr
      .asFunction<mab_device_config Function(int, int, int, int, int, int)>();

  int mab_device_init(
    ffi.Pointer<mab_device> pDevice,
    mab_device_config config,
    ffi.Pointer<mab_device_context> pContext,
    ffi.Pointer<mab_device_id> pDeviceId,
  ) {
    return _mab_device_init(
      pDevice,
      config,
      pContext,
      pDeviceId,
    );
  }

  late final _mab_device_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_device>,
              mab_device_config,
              ffi.Pointer<mab_device_context>,
              ffi.Pointer<mab_device_id>)>>('mab_device_init');
  late final _mab_device_init = _mab_device_initPtr.asFunction<
      int Function(ffi.Pointer<mab_device>, mab_device_config,
          ffi.Pointer<mab_device_context>, ffi.Pointer<mab_device_id>)>();

  int mab_device_capture_read(
    ffi.Pointer<mab_device> pDevice,
    ffi.Pointer<ffi.Float> pBuffer,
    int frameCount,
    ffi.Pointer<ffi.Int> pFramesRead,
  ) {
    return _mab_device_capture_read(
      pDevice,
      pBuffer,
      frameCount,
      pFramesRead,
    );
  }

  late final _mab_device_capture_readPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('mab_device_capture_read');
  late final _mab_device_capture_read = _mab_device_capture_readPtr.asFunction<
      int Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Int>)>();

  int mab_device_playback_write(
    ffi.Pointer<mab_device> pDevice,
    ffi.Pointer<ffi.Float> pBuffer,
    int frameCount,
    ffi.Pointer<ffi.Int> pFramesWrite,
  ) {
    return _mab_device_playback_write(
      pDevice,
      pBuffer,
      frameCount,
      pFramesWrite,
    );
  }

  late final _mab_device_playback_writePtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('mab_device_playback_write');
  late final _mab_device_playback_write =
      _mab_device_playback_writePtr.asFunction<
          int Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>, int,
              ffi.Pointer<ffi.Int>)>();

  int mab_device_get_device_info(
    ffi.Pointer<mab_device> pDevice,
    ffi.Pointer<mab_device_info> pDeviceInfo,
  ) {
    return _mab_device_get_device_info(
      pDevice,
      pDeviceInfo,
    );
  }

  late final _mab_device_get_device_infoPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_device>,
              ffi.Pointer<mab_device_info>)>>('mab_device_get_device_info');
  late final _mab_device_get_device_info =
      _mab_device_get_device_infoPtr.asFunction<
          int Function(
              ffi.Pointer<mab_device>, ffi.Pointer<mab_device_info>)>();

  int mab_device_start(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_start(
      pDevice,
    );
  }

  late final _mab_device_startPtr =
      _lookup<ffi.NativeFunction<mab_result Function(ffi.Pointer<mab_device>)>>(
          'mab_device_start');
  late final _mab_device_start =
      _mab_device_startPtr.asFunction<int Function(ffi.Pointer<mab_device>)>();

  int mab_device_stop(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_stop(
      pDevice,
    );
  }

  late final _mab_device_stopPtr =
      _lookup<ffi.NativeFunction<mab_result Function(ffi.Pointer<mab_device>)>>(
          'mab_device_stop');
  late final _mab_device_stop =
      _mab_device_stopPtr.asFunction<int Function(ffi.Pointer<mab_device>)>();

  int mab_device_get_state(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_get_state(
      pDevice,
    );
  }

  late final _mab_device_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<mab_device>)>>(
          'mab_device_get_state');
  late final _mab_device_get_state = _mab_device_get_statePtr
      .asFunction<int Function(ffi.Pointer<mab_device>)>();

  void mab_device_clear_buffer(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_clear_buffer(
      pDevice,
    );
  }

  late final _mab_device_clear_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mab_device>)>>(
          'mab_device_clear_buffer');
  late final _mab_device_clear_buffer = _mab_device_clear_bufferPtr
      .asFunction<void Function(ffi.Pointer<mab_device>)>();

  int mab_device_available_read(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_available_read(
      pDevice,
    );
  }

  late final _mab_device_available_readPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mab_device>)>>(
          'mab_device_available_read');
  late final _mab_device_available_read = _mab_device_available_readPtr
      .asFunction<int Function(ffi.Pointer<mab_device>)>();

  int mab_device_available_write(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_available_write(
      pDevice,
    );
  }

  late final _mab_device_available_writePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mab_device>)>>(
          'mab_device_available_write');
  late final _mab_device_available_write = _mab_device_available_writePtr
      .asFunction<int Function(ffi.Pointer<mab_device>)>();

  void mab_device_uninit(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_uninit(
      pDevice,
    );
  }

  late final _mab_device_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mab_device>)>>(
          'mab_device_uninit');
  late final _mab_device_uninit = _mab_device_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_device>)>();

  mab_audio_converter_config mab_audio_converter_config_init(
    int formatIn,
    int formatOut,
    int sampleRateIn,
    int sampleRateOut,
    int channelsIn,
    int channelsOut,
  ) {
    return _mab_audio_converter_config_init(
      formatIn,
      formatOut,
      sampleRateIn,
      sampleRateOut,
      channelsIn,
      channelsOut,
    );
  }

  late final _mab_audio_converter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_audio_converter_config Function(ffi.Int32, ffi.Int32, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('mab_audio_converter_config_init');
  late final _mab_audio_converter_config_init =
      _mab_audio_converter_config_initPtr.asFunction<
          mab_audio_converter_config Function(int, int, int, int, int, int)>();

  int mab_audio_converter_init(
    ffi.Pointer<mab_audio_converter> pConverter,
    mab_audio_converter_config config,
  ) {
    return _mab_audio_converter_init(
      pConverter,
      config,
    );
  }

  late final _mab_audio_converter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_audio_converter>,
              mab_audio_converter_config)>>('mab_audio_converter_init');
  late final _mab_audio_converter_init =
      _mab_audio_converter_initPtr.asFunction<
          int Function(
              ffi.Pointer<mab_audio_converter>, mab_audio_converter_config)>();

  int mab_audio_converter_process_pcm_frames(
    ffi.Pointer<mab_audio_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<uint64> pFrameCountOut,
  ) {
    return _mab_audio_converter_process_pcm_frames(
      pConverter,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _mab_audio_converter_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<uint64>)>>('mab_audio_converter_process_pcm_frames');
  late final _mab_audio_converter_process_pcm_frames =
      _mab_audio_converter_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<mab_audio_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<uint64>)>();

  int mab_audio_converter_get_input_latency(
    ffi.Pointer<mab_audio_converter> pConverter,
  ) {
    return _mab_audio_converter_get_input_latency(
      pConverter,
    );
  }

  late final _mab_audio_converter_get_input_latencyPtr = _lookup<
          ffi.NativeFunction<
              uint64 Function(ffi.Pointer<mab_audio_converter>)>>(
      'mab_audio_converter_get_input_latency');
  late final _mab_audio_converter_get_input_latency =
      _mab_audio_converter_get_input_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_audio_converter>)>();

  int mab_audio_converter_get_output_latency(
    ffi.Pointer<mab_audio_converter> pConverter,
  ) {
    return _mab_audio_converter_get_output_latency(
      pConverter,
    );
  }

  late final _mab_audio_converter_get_output_latencyPtr = _lookup<
          ffi.NativeFunction<
              uint64 Function(ffi.Pointer<mab_audio_converter>)>>(
      'mab_audio_converter_get_output_latency');
  late final _mab_audio_converter_get_output_latency =
      _mab_audio_converter_get_output_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_audio_converter>)>();

  int mab_audio_converter_get_required_input_frame_count(
    ffi.Pointer<mab_audio_converter> pConverter,
    int outputFrameCount,
    ffi.Pointer<uint64> pInputFrameCount,
  ) {
    return _mab_audio_converter_get_required_input_frame_count(
      pConverter,
      outputFrameCount,
      pInputFrameCount,
    );
  }

  late final _mab_audio_converter_get_required_input_frame_countPtr = _lookup<
          ffi.NativeFunction<
              mab_result Function(ffi.Pointer<mab_audio_converter>, uint64,
                  ffi.Pointer<uint64>)>>(
      'mab_audio_converter_get_required_input_frame_count');
  late final _mab_audio_converter_get_required_input_frame_count =
      _mab_audio_converter_get_required_input_frame_countPtr.asFunction<
          int Function(
              ffi.Pointer<mab_audio_converter>, int, ffi.Pointer<uint64>)>();

  int mab_audio_converter_get_expected_output_frame_count(
    ffi.Pointer<mab_audio_converter> pConverter,
    int inputFrameCount,
    ffi.Pointer<uint64> pOutputFrameCount,
  ) {
    return _mab_audio_converter_get_expected_output_frame_count(
      pConverter,
      inputFrameCount,
      pOutputFrameCount,
    );
  }

  late final _mab_audio_converter_get_expected_output_frame_countPtr = _lookup<
          ffi.NativeFunction<
              mab_result Function(ffi.Pointer<mab_audio_converter>, uint64,
                  ffi.Pointer<uint64>)>>(
      'mab_audio_converter_get_expected_output_frame_count');
  late final _mab_audio_converter_get_expected_output_frame_count =
      _mab_audio_converter_get_expected_output_frame_countPtr.asFunction<
          int Function(
              ffi.Pointer<mab_audio_converter>, int, ffi.Pointer<uint64>)>();

  int mab_audio_converter_reset(
    ffi.Pointer<mab_audio_converter> pConverter,
  ) {
    return _mab_audio_converter_reset(
      pConverter,
    );
  }

  late final _mab_audio_converter_resetPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_converter>)>>('mab_audio_converter_reset');
  late final _mab_audio_converter_reset = _mab_audio_converter_resetPtr
      .asFunction<int Function(ffi.Pointer<mab_audio_converter>)>();

  void mab_audio_converter_uninit(
    ffi.Pointer<mab_audio_converter> pConverter,
  ) {
    return _mab_audio_converter_uninit(
      pConverter,
    );
  }

  late final _mab_audio_converter_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<mab_audio_converter>)>>('mab_audio_converter_uninit');
  late final _mab_audio_converter_uninit = _mab_audio_converter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_audio_converter>)>();

  mab_audio_decoder_config mab_audio_decoder_config_init(
    int format,
    int sampleRate,
    int channels,
  ) {
    return _mab_audio_decoder_config_init(
      format,
      sampleRate,
      channels,
    );
  }

  late final _mab_audio_decoder_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_audio_decoder_config Function(
              ffi.Int32, ffi.Int, ffi.Int)>>('mab_audio_decoder_config_init');
  late final _mab_audio_decoder_config_init = _mab_audio_decoder_config_initPtr
      .asFunction<mab_audio_decoder_config Function(int, int, int)>();

  int mab_audio_decoder_get_info(
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<mab_audio_decoder_info> pInfo,
  ) {
    return _mab_audio_decoder_get_info(
      pFilePath,
      pInfo,
    );
  }

  late final _mab_audio_decoder_get_infoPtr = _lookup<
          ffi.NativeFunction<
              mab_result Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<mab_audio_decoder_info>)>>(
      'mab_audio_decoder_get_info');
  late final _mab_audio_decoder_get_info =
      _mab_audio_decoder_get_infoPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<mab_audio_decoder_info>)>();

  int mab_audio_decoder_init(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    mab_audio_decoder_config config,
    mab_audio_decoder_read_proc onRead,
    mab_audio_decoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _mab_audio_decoder_init(
      pDecoder,
      config,
      onRead,
      onSeek,
      pUserData,
    );
  }

  late final _mab_audio_decoder_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_decoder>,
              mab_audio_decoder_config,
              mab_audio_decoder_read_proc,
              mab_audio_decoder_seek_proc,
              ffi.Pointer<ffi.Void>)>>('mab_audio_decoder_init');
  late final _mab_audio_decoder_init = _mab_audio_decoder_initPtr.asFunction<
      int Function(
          ffi.Pointer<mab_audio_decoder>,
          mab_audio_decoder_config,
          mab_audio_decoder_read_proc,
          mab_audio_decoder_seek_proc,
          ffi.Pointer<ffi.Void>)>();

  int mab_audio_decoder_init_file(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<ffi.Char> pFilePath,
    mab_audio_decoder_config config,
  ) {
    return _mab_audio_decoder_init_file(
      pDecoder,
      pFilePath,
      config,
    );
  }

  late final _mab_audio_decoder_init_filePtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<ffi.Char>,
              mab_audio_decoder_config)>>('mab_audio_decoder_init_file');
  late final _mab_audio_decoder_init_file =
      _mab_audio_decoder_init_filePtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<ffi.Char>,
              mab_audio_decoder_config)>();

  int mab_audio_decoder_decode(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<ffi.Float> pOutput,
    int frameCount,
    ffi.Pointer<uint64> pFramesRead,
  ) {
    return _mab_audio_decoder_decode(
      pDecoder,
      pOutput,
      frameCount,
      pFramesRead,
    );
  }

  late final _mab_audio_decoder_decodePtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<ffi.Float>,
              uint64,
              ffi.Pointer<uint64>)>>('mab_audio_decoder_decode');
  late final _mab_audio_decoder_decode =
      _mab_audio_decoder_decodePtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<ffi.Float>,
              int, ffi.Pointer<uint64>)>();

  int mab_audio_decoder_get_cursor(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<uint64> pCursor,
  ) {
    return _mab_audio_decoder_get_cursor(
      pDecoder,
      pCursor,
    );
  }

  late final _mab_audio_decoder_get_cursorPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<uint64>)>>('mab_audio_decoder_get_cursor');
  late final _mab_audio_decoder_get_cursor =
      _mab_audio_decoder_get_cursorPtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<uint64>)>();

  int mab_audio_decoder_set_cursor(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    int cursor,
  ) {
    return _mab_audio_decoder_set_cursor(
      pDecoder,
      cursor,
    );
  }

  late final _mab_audio_decoder_set_cursorPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_audio_decoder>,
              uint64)>>('mab_audio_decoder_set_cursor');
  late final _mab_audio_decoder_set_cursor = _mab_audio_decoder_set_cursorPtr
      .asFunction<int Function(ffi.Pointer<mab_audio_decoder>, int)>();

  int mab_audio_decoder_get_length(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<uint64> pLength,
  ) {
    return _mab_audio_decoder_get_length(
      pDecoder,
      pLength,
    );
  }

  late final _mab_audio_decoder_get_lengthPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<uint64>)>>('mab_audio_decoder_get_length');
  late final _mab_audio_decoder_get_length =
      _mab_audio_decoder_get_lengthPtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<uint64>)>();

  int mab_audio_decoder_uninit(
    ffi.Pointer<mab_audio_decoder> pDecoder,
  ) {
    return _mab_audio_decoder_uninit(
      pDecoder,
    );
  }

  late final _mab_audio_decoder_uninitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_decoder>)>>('mab_audio_decoder_uninit');
  late final _mab_audio_decoder_uninit = _mab_audio_decoder_uninitPtr
      .asFunction<int Function(ffi.Pointer<mab_audio_decoder>)>();

  mab_low_pass_filter_config mab_low_pass_filter_config_init(
    int format,
    int sampleRate,
    int channels,
    int order,
    double cutoffFrequency,
  ) {
    return _mab_low_pass_filter_config_init(
      format,
      sampleRate,
      channels,
      order,
      cutoffFrequency,
    );
  }

  late final _mab_low_pass_filter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_low_pass_filter_config Function(ffi.Int32, u_int32_t, u_int32_t,
              u_int32_t, ffi.Double)>>('mab_low_pass_filter_config_init');
  late final _mab_low_pass_filter_config_init =
      _mab_low_pass_filter_config_initPtr.asFunction<
          mab_low_pass_filter_config Function(int, int, int, int, double)>();

  int mab_low_pass_filter_init(
    ffi.Pointer<mab_low_pass_filter> pLPF,
    mab_low_pass_filter_config config,
  ) {
    return _mab_low_pass_filter_init(
      pLPF,
      config,
    );
  }

  late final _mab_low_pass_filter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_low_pass_filter>,
              mab_low_pass_filter_config)>>('mab_low_pass_filter_init');
  late final _mab_low_pass_filter_init =
      _mab_low_pass_filter_initPtr.asFunction<
          int Function(
              ffi.Pointer<mab_low_pass_filter>, mab_low_pass_filter_config)>();

  int mab_low_pass_filter_process(
    ffi.Pointer<mab_low_pass_filter> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _mab_low_pass_filter_process(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _mab_low_pass_filter_processPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_low_pass_filter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u_int64_t)>>('mab_low_pass_filter_process');
  late final _mab_low_pass_filter_process =
      _mab_low_pass_filter_processPtr.asFunction<
          int Function(ffi.Pointer<mab_low_pass_filter>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int mab_low_pass_filter_reinit(
    ffi.Pointer<mab_low_pass_filter> pLPF,
    mab_low_pass_filter_config config,
  ) {
    return _mab_low_pass_filter_reinit(
      pLPF,
      config,
    );
  }

  late final _mab_low_pass_filter_reinitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_low_pass_filter>,
              mab_low_pass_filter_config)>>('mab_low_pass_filter_reinit');
  late final _mab_low_pass_filter_reinit =
      _mab_low_pass_filter_reinitPtr.asFunction<
          int Function(
              ffi.Pointer<mab_low_pass_filter>, mab_low_pass_filter_config)>();

  int mab_low_pass_filter_get_latency(
    ffi.Pointer<mab_low_pass_filter> pLPF,
  ) {
    return _mab_low_pass_filter_get_latency(
      pLPF,
    );
  }

  late final _mab_low_pass_filter_get_latencyPtr = _lookup<
          ffi.NativeFunction<
              u_int32_t Function(ffi.Pointer<mab_low_pass_filter>)>>(
      'mab_low_pass_filter_get_latency');
  late final _mab_low_pass_filter_get_latency =
      _mab_low_pass_filter_get_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_low_pass_filter>)>();

  void mab_low_pass_filter_uninit(
    ffi.Pointer<mab_low_pass_filter> pLPF,
  ) {
    return _mab_low_pass_filter_uninit(
      pLPF,
    );
  }

  late final _mab_low_pass_filter_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<mab_low_pass_filter>)>>('mab_low_pass_filter_uninit');
  late final _mab_low_pass_filter_uninit = _mab_low_pass_filter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_low_pass_filter>)>();

  mab_high_pass_filter_config mab_high_pass_filter_config_init(
    int format,
    int sampleRate,
    int channels,
    int order,
    double cutoffFrequency,
  ) {
    return _mab_high_pass_filter_config_init(
      format,
      sampleRate,
      channels,
      order,
      cutoffFrequency,
    );
  }

  late final _mab_high_pass_filter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_high_pass_filter_config Function(ffi.Int32, u_int32_t, u_int32_t,
              u_int32_t, ffi.Double)>>('mab_high_pass_filter_config_init');
  late final _mab_high_pass_filter_config_init =
      _mab_high_pass_filter_config_initPtr.asFunction<
          mab_high_pass_filter_config Function(int, int, int, int, double)>();

  int mab_high_pass_filter_init(
    ffi.Pointer<mab_high_pass_filter> pHPF,
    mab_high_pass_filter_config config,
  ) {
    return _mab_high_pass_filter_init(
      pHPF,
      config,
    );
  }

  late final _mab_high_pass_filter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_high_pass_filter>,
              mab_high_pass_filter_config)>>('mab_high_pass_filter_init');
  late final _mab_high_pass_filter_init =
      _mab_high_pass_filter_initPtr.asFunction<
          int Function(ffi.Pointer<mab_high_pass_filter>,
              mab_high_pass_filter_config)>();

  int mab_high_pass_filter_process(
    ffi.Pointer<mab_high_pass_filter> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _mab_high_pass_filter_process(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _mab_high_pass_filter_processPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_high_pass_filter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u_int64_t)>>('mab_high_pass_filter_process');
  late final _mab_high_pass_filter_process =
      _mab_high_pass_filter_processPtr.asFunction<
          int Function(ffi.Pointer<mab_high_pass_filter>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int mab_high_pass_filter_reinit(
    ffi.Pointer<mab_high_pass_filter> pHPF,
    mab_high_pass_filter_config config,
  ) {
    return _mab_high_pass_filter_reinit(
      pHPF,
      config,
    );
  }

  late final _mab_high_pass_filter_reinitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_high_pass_filter>,
              mab_high_pass_filter_config)>>('mab_high_pass_filter_reinit');
  late final _mab_high_pass_filter_reinit =
      _mab_high_pass_filter_reinitPtr.asFunction<
          int Function(ffi.Pointer<mab_high_pass_filter>,
              mab_high_pass_filter_config)>();

  int mab_high_pass_filter_get_latency(
    ffi.Pointer<mab_high_pass_filter> pHPF,
  ) {
    return _mab_high_pass_filter_get_latency(
      pHPF,
    );
  }

  late final _mab_high_pass_filter_get_latencyPtr = _lookup<
          ffi.NativeFunction<
              u_int32_t Function(ffi.Pointer<mab_high_pass_filter>)>>(
      'mab_high_pass_filter_get_latency');
  late final _mab_high_pass_filter_get_latency =
      _mab_high_pass_filter_get_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_high_pass_filter>)>();

  void mab_high_pass_filter_uninit(
    ffi.Pointer<mab_high_pass_filter> pHPF,
  ) {
    return _mab_high_pass_filter_uninit(
      pHPF,
    );
  }

  late final _mab_high_pass_filter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<mab_high_pass_filter>)>>(
      'mab_high_pass_filter_uninit');
  late final _mab_high_pass_filter_uninit = _mab_high_pass_filter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_high_pass_filter>)>();

  mab_low_shelf_filter_config mab_low_shelf_filter_config_init(
    int format,
    int sampleRate,
    int channels,
    double gainDb,
    double shelfSlope,
    double frequency,
  ) {
    return _mab_low_shelf_filter_config_init(
      format,
      sampleRate,
      channels,
      gainDb,
      shelfSlope,
      frequency,
    );
  }

  late final _mab_low_shelf_filter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_low_shelf_filter_config Function(
              ffi.Int32,
              u_int32_t,
              u_int32_t,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('mab_low_shelf_filter_config_init');
  late final _mab_low_shelf_filter_config_init =
      _mab_low_shelf_filter_config_initPtr.asFunction<
          mab_low_shelf_filter_config Function(
              int, int, int, double, double, double)>();

  int mab_low_shelf_filter_init(
    ffi.Pointer<mab_low_shelf_filter> pLSF,
    mab_low_shelf_filter_config config,
  ) {
    return _mab_low_shelf_filter_init(
      pLSF,
      config,
    );
  }

  late final _mab_low_shelf_filter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_low_shelf_filter>,
              mab_low_shelf_filter_config)>>('mab_low_shelf_filter_init');
  late final _mab_low_shelf_filter_init =
      _mab_low_shelf_filter_initPtr.asFunction<
          int Function(ffi.Pointer<mab_low_shelf_filter>,
              mab_low_shelf_filter_config)>();

  int mab_low_shelf_filter_process(
    ffi.Pointer<mab_low_shelf_filter> pLSF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _mab_low_shelf_filter_process(
      pLSF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _mab_low_shelf_filter_processPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_low_shelf_filter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u_int64_t)>>('mab_low_shelf_filter_process');
  late final _mab_low_shelf_filter_process =
      _mab_low_shelf_filter_processPtr.asFunction<
          int Function(ffi.Pointer<mab_low_shelf_filter>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int mab_low_shelf_filter_reinit(
    ffi.Pointer<mab_low_shelf_filter> pLSF,
    mab_low_shelf_filter_config config,
  ) {
    return _mab_low_shelf_filter_reinit(
      pLSF,
      config,
    );
  }

  late final _mab_low_shelf_filter_reinitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_low_shelf_filter>,
              mab_low_shelf_filter_config)>>('mab_low_shelf_filter_reinit');
  late final _mab_low_shelf_filter_reinit =
      _mab_low_shelf_filter_reinitPtr.asFunction<
          int Function(ffi.Pointer<mab_low_shelf_filter>,
              mab_low_shelf_filter_config)>();

  int mab_low_shelf_filter_get_latency(
    ffi.Pointer<mab_low_shelf_filter> pLSF,
  ) {
    return _mab_low_shelf_filter_get_latency(
      pLSF,
    );
  }

  late final _mab_low_shelf_filter_get_latencyPtr = _lookup<
          ffi.NativeFunction<
              u_int32_t Function(ffi.Pointer<mab_low_shelf_filter>)>>(
      'mab_low_shelf_filter_get_latency');
  late final _mab_low_shelf_filter_get_latency =
      _mab_low_shelf_filter_get_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_low_shelf_filter>)>();

  void mab_low_shelf_filter_uninit(
    ffi.Pointer<mab_low_shelf_filter> pLSF,
  ) {
    return _mab_low_shelf_filter_uninit(
      pLSF,
    );
  }

  late final _mab_low_shelf_filter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<mab_low_shelf_filter>)>>(
      'mab_low_shelf_filter_uninit');
  late final _mab_low_shelf_filter_uninit = _mab_low_shelf_filter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_low_shelf_filter>)>();

  mab_high_shelf_filter_config mab_high_shelf_filter_config_init(
    int format,
    int sampleRate,
    int channels,
    double gainDb,
    double shelfSlope,
    double frequency,
  ) {
    return _mab_high_shelf_filter_config_init(
      format,
      sampleRate,
      channels,
      gainDb,
      shelfSlope,
      frequency,
    );
  }

  late final _mab_high_shelf_filter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_high_shelf_filter_config Function(
              ffi.Int32,
              u_int32_t,
              u_int32_t,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('mab_high_shelf_filter_config_init');
  late final _mab_high_shelf_filter_config_init =
      _mab_high_shelf_filter_config_initPtr.asFunction<
          mab_high_shelf_filter_config Function(
              int, int, int, double, double, double)>();

  int mab_high_shelf_filter_init(
    ffi.Pointer<mab_high_shelf_filter> pHSF,
    mab_high_shelf_filter_config config,
  ) {
    return _mab_high_shelf_filter_init(
      pHSF,
      config,
    );
  }

  late final _mab_high_shelf_filter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_high_shelf_filter>,
              mab_high_shelf_filter_config)>>('mab_high_shelf_filter_init');
  late final _mab_high_shelf_filter_init =
      _mab_high_shelf_filter_initPtr.asFunction<
          int Function(ffi.Pointer<mab_high_shelf_filter>,
              mab_high_shelf_filter_config)>();

  int mab_high_shelf_filter_process(
    ffi.Pointer<mab_high_shelf_filter> pHSF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _mab_high_shelf_filter_process(
      pHSF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _mab_high_shelf_filter_processPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_high_shelf_filter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u_int64_t)>>('mab_high_shelf_filter_process');
  late final _mab_high_shelf_filter_process =
      _mab_high_shelf_filter_processPtr.asFunction<
          int Function(ffi.Pointer<mab_high_shelf_filter>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int mab_high_shelf_filter_reinit(
    ffi.Pointer<mab_high_shelf_filter> pHSF,
    mab_high_shelf_filter_config config,
  ) {
    return _mab_high_shelf_filter_reinit(
      pHSF,
      config,
    );
  }

  late final _mab_high_shelf_filter_reinitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_high_shelf_filter>,
              mab_high_shelf_filter_config)>>('mab_high_shelf_filter_reinit');
  late final _mab_high_shelf_filter_reinit =
      _mab_high_shelf_filter_reinitPtr.asFunction<
          int Function(ffi.Pointer<mab_high_shelf_filter>,
              mab_high_shelf_filter_config)>();

  int mab_high_shelf_filter_get_latency(
    ffi.Pointer<mab_high_shelf_filter> pHSF,
  ) {
    return _mab_high_shelf_filter_get_latency(
      pHSF,
    );
  }

  late final _mab_high_shelf_filter_get_latencyPtr = _lookup<
          ffi.NativeFunction<
              u_int32_t Function(ffi.Pointer<mab_high_shelf_filter>)>>(
      'mab_high_shelf_filter_get_latency');
  late final _mab_high_shelf_filter_get_latency =
      _mab_high_shelf_filter_get_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_high_shelf_filter>)>();

  void mab_high_shelf_filter_uninit(
    ffi.Pointer<mab_high_shelf_filter> pHSF,
  ) {
    return _mab_high_shelf_filter_uninit(
      pHSF,
    );
  }

  late final _mab_high_shelf_filter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<mab_high_shelf_filter>)>>(
      'mab_high_shelf_filter_uninit');
  late final _mab_high_shelf_filter_uninit = _mab_high_shelf_filter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_high_shelf_filter>)>();

  mab_peaking_eq_filter_config mab_peaking_eq_filter_config_init(
    int format,
    int sampleRate,
    int channels,
    double gainDb,
    double q,
    double frequency,
  ) {
    return _mab_peaking_eq_filter_config_init(
      format,
      sampleRate,
      channels,
      gainDb,
      q,
      frequency,
    );
  }

  late final _mab_peaking_eq_filter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_peaking_eq_filter_config Function(
              ffi.Int32,
              u_int32_t,
              u_int32_t,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('mab_peaking_eq_filter_config_init');
  late final _mab_peaking_eq_filter_config_init =
      _mab_peaking_eq_filter_config_initPtr.asFunction<
          mab_peaking_eq_filter_config Function(
              int, int, int, double, double, double)>();

  int mab_peaking_eq_filter_init(
    ffi.Pointer<mab_peaking_eq_filter> pEQ,
    mab_peaking_eq_filter_config config,
  ) {
    return _mab_peaking_eq_filter_init(
      pEQ,
      config,
    );
  }

  late final _mab_peaking_eq_filter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_peaking_eq_filter>,
              mab_peaking_eq_filter_config)>>('mab_peaking_eq_filter_init');
  late final _mab_peaking_eq_filter_init =
      _mab_peaking_eq_filter_initPtr.asFunction<
          int Function(ffi.Pointer<mab_peaking_eq_filter>,
              mab_peaking_eq_filter_config)>();

  int mab_peaking_eq_filter_process(
    ffi.Pointer<mab_peaking_eq_filter> pEQ,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _mab_peaking_eq_filter_process(
      pEQ,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _mab_peaking_eq_filter_processPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_peaking_eq_filter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u_int64_t)>>('mab_peaking_eq_filter_process');
  late final _mab_peaking_eq_filter_process =
      _mab_peaking_eq_filter_processPtr.asFunction<
          int Function(ffi.Pointer<mab_peaking_eq_filter>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int mab_peaking_eq_filter_reinit(
    ffi.Pointer<mab_peaking_eq_filter> pEQ,
    mab_peaking_eq_filter_config config,
  ) {
    return _mab_peaking_eq_filter_reinit(
      pEQ,
      config,
    );
  }

  late final _mab_peaking_eq_filter_reinitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_peaking_eq_filter>,
              mab_peaking_eq_filter_config)>>('mab_peaking_eq_filter_reinit');
  late final _mab_peaking_eq_filter_reinit =
      _mab_peaking_eq_filter_reinitPtr.asFunction<
          int Function(ffi.Pointer<mab_peaking_eq_filter>,
              mab_peaking_eq_filter_config)>();

  int mab_peaking_eq_filter_get_latency(
    ffi.Pointer<mab_peaking_eq_filter> pEQ,
  ) {
    return _mab_peaking_eq_filter_get_latency(
      pEQ,
    );
  }

  late final _mab_peaking_eq_filter_get_latencyPtr = _lookup<
          ffi.NativeFunction<
              u_int32_t Function(ffi.Pointer<mab_peaking_eq_filter>)>>(
      'mab_peaking_eq_filter_get_latency');
  late final _mab_peaking_eq_filter_get_latency =
      _mab_peaking_eq_filter_get_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_peaking_eq_filter>)>();

  void mab_peaking_eq_filter_uninit(
    ffi.Pointer<mab_peaking_eq_filter> pEQ,
  ) {
    return _mab_peaking_eq_filter_uninit(
      pEQ,
    );
  }

  late final _mab_peaking_eq_filter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<mab_peaking_eq_filter>)>>(
      'mab_peaking_eq_filter_uninit');
  late final _mab_peaking_eq_filter_uninit = _mab_peaking_eq_filter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_peaking_eq_filter>)>();
}

abstract class mab_format {
  static const int mab_format_unknown = 0;
  static const int mab_format_u8 = 1;
  static const int mab_format_s16 = 2;
  static const int mab_format_s24 = 3;
  static const int mab_format_s32 = 4;
  static const int mab_format_f32 = 5;
  static const int mab_format_count = 6;
}

abstract class mab_backend {
  static const int mab_backend_wasapi = 0;
  static const int mab_backend_dsound = 1;
  static const int mab_backend_winmm = 2;
  static const int mab_backend_coreaudio = 3;
  static const int mab_backend_sndio = 4;
  static const int mab_backend_audio4 = 5;
  static const int mab_backend_oss = 6;
  static const int mab_backend_pulseaudio = 7;
  static const int mab_backend_alsa = 8;
  static const int mab_backend_jack = 9;
  static const int mab_backend_aaudio = 10;
  static const int mab_backend_opensl = 11;
  static const int mab_backend_webaudio = 12;
}

abstract class mab_dither_mode {
  static const int mab_dither_mode_none = 0;
  static const int mab_dither_mode_rectangle = 1;
  static const int mab_dither_mode_triangle = 2;
}

abstract class mab_channel_mix_mode {
  static const int mab_channel_mix_mode_rectangular = 0;
  static const int mab_channel_mix_mode_simple = 1;
}

abstract class mab_device_type {
  static const int mab_device_type_playback = 1;
  static const int mab_device_type_capture = 2;
}

abstract class mab_device_state {
  static const int mab_device_state_uninitialized = 0;
  static const int mab_device_state_stopped = 1;
  static const int mab_device_state_started = 2;
  static const int mab_device_state_starting = 3;
  static const int mab_device_state_stopping = 4;
}

abstract class mab_device_notification_type {
  static const int mab_device_notification_type_started = 0;
  static const int mab_device_notification_type_stopped = 1;
  static const int mab_device_notification_type_rerouted = 2;
  static const int mab_device_notification_type_interruption_began = 3;
  static const int mab_device_notification_type_interruption_ended = 4;
}

abstract class mab_performance_profile {
  static const int mab_performance_profile_low_latency = 0;
  static const int mab_performance_profile_conservative = 1;
}

abstract class mab_seek_origin {
  static const int mab_seek_origin_start = 0;
  static const int mab_seek_origin_current = 1;
  static const int mab_seek_origin_end = 2;
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

@ffi.Packed(1)
class _OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
class _OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
class _OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

typedef __int32_t = ffi.Int;

class mab_device_context extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;

  external ffi.Pointer<ffi.Void> pMaContext;

  @ffi.Int32()
  external int backend;
}

class mab_device_id extends ffi.Union {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.WChar> wasapi;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> dsound;

  @ffi.UnsignedInt()
  external int winmm;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> alsa;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> pulse;

  @ffi.Int()
  external int jack;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> coreaudio;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> sndio;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> audio4;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> oss;

  @ffi.Int()
  external int aaudio;

  @ffi.UnsignedInt()
  external int opensl;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> webaudio;

  @ffi.Int()
  external int nullbackend;
}

class mab_device_info extends ffi.Struct {
  external mab_device_id id;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> name;

  @mab_bool()
  external int isDefault;
}

typedef mab_bool = ffi.Int;
typedef mab_result = ffi.Int;

class mab_device extends ffi.Struct {
  external mab_device_config config;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  external ffi.Pointer<ffi.Void> pData;
}

class mab_device_config extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int()
  external int bufferFrameSize;

  @mab_bool()
  external int noFixedSizedCallback;

  @ffi.Int64()
  external int notificationPortId;

  @ffi.Int32()
  external int channelMixMode;

  @ffi.Int32()
  external int performanceProfile;
}

class mab_device_notification extends ffi.Struct {
  @ffi.Int32()
  external int type;
}

class mab_audio_converter_config extends ffi.Struct {
  external UnnamedStruct1 input;

  external UnnamedStruct2 output;

  @ffi.Int32()
  external int ditherMode;

  @ffi.Int32()
  external int channelMixMode;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;
}

class UnnamedStruct2 extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;
}

class mab_audio_converter extends ffi.Struct {
  external mab_audio_converter_config config;

  external ffi.Pointer<ffi.Void> pData;
}

typedef uint64 = ffi.UnsignedLongLong;

class mab_audio_decoder_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int32()
  external int ditherMode;

  @ffi.Int32()
  external int channelMixMode;
}

class mab_audio_decoder extends ffi.Struct {
  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  external ffi.Pointer<ffi.Void> pData;

  external ffi.Pointer<ffi.Void> pUserData;
}

class mab_audio_decoder_info extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @uint64()
  external int length;
}

typedef mab_audio_decoder_read_proc = ffi.Pointer<
    ffi.NativeFunction<
        mab_result Function(ffi.Pointer<mab_audio_decoder>,
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Size>)>>;
typedef mab_audio_decoder_seek_proc = ffi.Pointer<
    ffi.NativeFunction<
        mab_result Function(
            ffi.Pointer<mab_audio_decoder>, ffi.Int64, ffi.Int32)>>;

class mab_low_pass_filter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int()
  external int order;

  @ffi.Float()
  external double cutoffFrequency;
}

typedef u_int32_t = ffi.UnsignedInt;

class mab_low_pass_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;
}

typedef u_int64_t = ffi.UnsignedLongLong;

class mab_high_pass_filter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int()
  external int order;

  @ffi.Float()
  external double cutoffFrequency;
}

class mab_high_pass_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;
}

class mab_low_shelf_filter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Double()
  external double gainDb;

  @ffi.Double()
  external double shelfSlope;

  @ffi.Double()
  external double frequency;
}

class mab_low_shelf_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;
}

class mab_high_shelf_filter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Double()
  external double gainDb;

  @ffi.Double()
  external double shelfSlope;

  @ffi.Double()
  external double frequency;
}

class mab_high_shelf_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;
}

class mab_peaking_eq_filter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Double()
  external double gainDb;

  @ffi.Double()
  external double q;

  @ffi.Double()
  external double frequency;
}

class mab_peaking_eq_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;
}

const int NULL = 0;

const int _STRING_H_ = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 0;

const int __DARWIN_64_BIT_INO_T = 0;

const int __DARWIN_VERS_1050 = 0;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int NBBY = 8;

const int FD_SETSIZE = 1024;

const int MAB_TRUE = 1;

const int MAB_FALSE = 0;
